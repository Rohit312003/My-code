#include <bits/stdc++.h>
#include <string>
#include <math.h>
#include <string.h>
#include <sstream>
#include <iostream>
#include <vector>
using namespace std;
typedef long long int ll;
#define MOD 1000000007;
const int N = 1e5 + 10;
const int INF = 1e9 + 10;
vector<int> vis(N, 0);
int mdd = 1e9 + 7;
vector<int> dist(N, INF);
vector<int> g[N];
int poww(int a, int y)
{
    if (y == 0)
    {
        return 1;
    }
    long long x = poww(a, y / 2);
    if (y % 2 == 0)
    {
        return (x * x) % MOD;
    }
    else
    {
        return (a * (x * x)) % MOD;
    }
}
// in prefix sum indexing startfrom 1 based:)

vector<int> depn(N, 0);
int dfs(int v)
{
    int l = 0;
    vis[v] = 1;

    for (auto child : g[v])
    {

        if (!vis[child])
        {

            vis[child] = 1;
            l += dfs(child);
        }
    }
    return l + 1;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int e, v;
    cin >> v >> e;
    for (int i = 0; i < e; i++)
    {
        int x, y;
        cin >> x >> y;

        g[x].push_back(y);
        g[y].push_back(x);
        depn[y]++;
    }

    stack<int> s;

    int n = v;
    long long p = 0;
    if (n % 2)
    {
        p = (n)*1LL * ((n - 1) / 2);
    }
    else
    {
        p = 1LL*(n - 1) * ((n) / 2);
    }

    long long o = 0;
    for (int i = 0; i < v; i++)
    {
        if (!vis[i])
        {
            int k = dfs(i);
            if (k >= 2)
            {

                if (k % 2)
                {
                    o += (k) * ((k - 1) / 2) * 1LL;
                }
                else
                {
                    o += (k - 1) * ((k) / 2) * 1LL;
                }
            }
        }
    }

    cout << p - o;

    return 0;
}
